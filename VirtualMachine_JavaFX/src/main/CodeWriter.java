package main;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import application.ApplicationController;
import util.Translator;

public class CodeWriter {

	/* VAR */
	private ApplicationController controller;
	private BufferedWriter bw;
	private int JMP_Count = 0;
	private final Translator translator;

	public CodeWriter(File outputFile) {
		this.translator = new Translator();
		try {
			this.bw = new BufferedWriter(new FileWriter(outputFile));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void writeArithmetic(String command) {
		String flag = "";
		if(command.equals("lt") || command.equals("eq") || command.equals("gt")){
			flag = Translator.JMP_FLAG;
			this.JMP_Count++;
		}else {
			flag = Translator.ARITHMETIC_FLAG;
		}
		write(translator.getASMCode(flag, command, "", 0, JMP_Count));
	}

	public void writePushPop(String command, String segment, int index) {
		if (index < 0)
			throw new IllegalArgumentException();
		String flag = "";
		if (segment.equals("pointer")) {
			flag = Translator.POINTER_FLAG;
		} else if (command.equals("push")) {
			if (segment.equals("constant")) {
				flag = Translator.CONSTANT_FLAG;
			} else {
				flag = Translator.PUSH_FLAG;
			}
		} else if (command.equals("pop")) {

			flag = Translator.POP_FLAG;

		} else
			throw new IllegalArgumentException();
		write(translator.getASMCode(flag, command, segment, index, JMP_Count));			
	}

	public void writeInit() {
		write("Assembler Code generated by VM\n");
	}

	public void writeLabel(String arg) {
		write("(" + arg + ")\n");
	}

	public void writeGoto(String arg) {
		write("@" + arg + "\n0;JMP\n");
	}

	public void writeIf(String arg) {
		write("@SP\nA=M-1\nD=M\n@" + arg + "\nD;JNE\n");
	}

	public void writeCall(String functionName, int numArgs) {
	}

	public void writeReturn() {

	}

	public void writeFunction(String functionName, int numLocals) {

	}

	private void write(String asmCode) {
		try {
			asmCode = asmCode.replaceAll("\n", "\r\n");
			this.controller.addAfterArea(asmCode);
			bw.write(asmCode);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void close() {
		try {
			this.bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void setApplicationController(ApplicationController controller) {
		this.controller = controller;
	}

}